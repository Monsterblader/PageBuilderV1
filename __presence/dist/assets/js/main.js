(function() {
  'use strict';

  angular.module('moment', [])
    .service('moment', ['$window', function($window) {
      return $window.moment;
    }]);

}());

(function() {
  'use strict';

  angular.module('ramda', [])
    .service('R', ['$window', function($window) {
      return $window.R;
    }]);

}());

(function() {
  'use strict';

  angular.module('narvar', [

    // Core modules
    'ngSanitize',
    'ngRoute',
    'ngAnimate',
    'ngMessages',
    'ngResource',

    // Custom modules (app/modules/*)
    'ramda',
    'moment',

    // Template cache module generated by gulp
    'templates-app'

  ]).config(['$routeProvider', '$httpProvider', '$locationProvider',
    function($routeProvider, $httpProvider, $locationProvider) {
      $locationProvider.html5Mode(true);

      $routeProvider.
        when('/', {
          templateUrl : '/views/pages/index',
          controller  : 'MainCtrl as mainCtrl'
        }).
        otherwise({
          redirectTo : '/'
        });

    }]);

}());

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.factory.locationSvc
   * @description
   * # locationSvc
   * Original: https://github.com/angular/angular.js/issues/1699#issuecomment-22511464
   *
   * Usage:
   *
   * (interception is needed for Back/Forward buttons to work)
   *
   * location.intercept($scope._url_pattern, function(matched) {
   *   * can return false to abort interception
   *   var type = matched[1]
   *   if (!type) {
   *     return;
   *   }
   *   $scope.safeApply(function() {
   *     $scope.data_type = type;
   *     $scope.params.page = 1;
   *     $scope.get_data();
   *   });
   * });
   *
   * anywhere in your controller:
   * location.skipReload().path(url);
   *
   * to replace in history stack:
   * location.skipReload().path(url).replace();
   */
  angular.module('narvar').factory('LocationSvc', [
    '$location',
    '$route',
    '$rootScope',
    function($location, $route, $rootScope) {
      var pageRoute = $route.current;

      $location.skipReload = function() {
        var unbind = $rootScope.$on('$locationChangeSuccess', function() {
          $route.current = pageRoute;
          unbind();
        });
        return $location;
      };

      if ($location.intercept) {
        throw '$location.intercept is already defined';
      }

      $location.intercept = function(urlPattern, loadUrl) {

        var parsePath = function() {
          var match = $location.path().match(urlPattern);
          if (match) {
            match.shift();
            return match;
          }
        };

        var unbind = $rootScope.$on("$locationChangeSuccess", function() {
          var matched = parsePath();
          if (!matched || loadUrl(matched) === false) {
            return unbind();
          }
          $route.current = pageRoute;
        });
      };

      return $location;
    }
  ]);
}(angular));

(function (angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.service.TrackingSvc
   * @description
   * # TrackingSvc
   * Service to handle tracking API calls and data persistence
   */
  angular.module('narvar').service('TrackingSvc', ['$resource', '$cacheFactory', 'R',
    function ($resource, $cacheFactory, R) {
      var svc = this;

      /**
       * Internal cache to store API responses.
       * @type {{data: *, ttl: number, expires: Date}}
       */
      svc.cache = {
        data    : $cacheFactory('TrackingSvc'),
        ttl     : 3600,
        expires : new Date() // Expired on init so first resource call will seed cache
      };

      svc.resources = {

        /**
         * Grab the tracking information from the server.
         * @todo this is a placeholder, remove before delivery
         */
        tracking : $resource('/api/v0.0.0/tracking', null, {
          'get' : {

            /**
             * Request method.
             * @type {String}
             */
            method : 'GET',

            /**
             * Scrub the data before sending it back to the controller.
             * @param data
             * @returns {*}
             */
            transformResponse : function (data) {
              data = JSON.parse(data);
              svc.cache.data.put('tracking', data);
              return data;
            }
          }

        }) // End tracking
      };

      return svc;
    }]);
}(angular));

(function (angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.controller.MainCtrl
   * @description
   * # MainCtrl
   * Main controller for the home page
   */
  angular.module('narvar').controller('MainCtrl', ['TrackingSvc',
    function (TrackingSvc) {

      this.trackingSvc = TrackingSvc;

    }]);

}(angular));

(function (angular) {
  'use strict';

  /**
   * @ngdoc function
   * @name narvar.controller:RootCtrl
   * @description
   * # RootCtrl
   * Root controller to handle app level failures and promise rejections
   */
  angular.module('narvar').controller('RootCtrl', ['$rootScope', '$location', '$window',
    function ($rootScope, $location, $window) {

      $rootScope.$on('$routeChangeError', function (event, current, previous, rejection) {
        // @todo Graceful failover before launch.
        $window.alert(rejection);
      });

      this.$location = $location;

    }]);

}(angular));

'use strict';

/**
 * @ngdoc function
 * @author seancannon
 * @name narvar.directive.modal
 * @description
 * # modal
 * Reusable modal container
 */
angular.module('narvar').directive('modal', ['$window', '$timeout',
  function ($window, $timeout) {

    return {
      restrict    : 'E',
      scope       : {},
      templateUrl : '/partials/modal',
      link        : function (scope, element, attrs) {

        /**
         * Show the modal by setting visibleWrapper and visibleContent to true.
         * The view has ng-if on those properties.
         * @param params
         * @private
         */
        function _showModal (e, params) {

          params = params || {};

          scope.templateUrl = params.templateUrl || '/partials/404';
          scope.visibleWrapper = true;
          $timeout(function () {
            scope.visibleContent = true;
          }, 700);

          if (typeof params.callback === 'function') {
            params.callback();
          }
        }

        /**
         * Show the modal by setting visibleWrapper and visibleContent to false.
         * The view has ng-if on those properties.
         * @param params
         * @private
         */
        function _hideModal (e, params) {
          params = params || {};

          scope.visibleWrapper = false;
          scope.visibleContent = false;

          if (typeof params.callback === 'function') {
            params.callback();
          }
        }

        /**
         * View be used with ng-include in the modal partial
         * @type {String}
         */
        scope.templateUrl = '/partials/404';

        scope.$on('narvar.showModal', _showModal);
        scope.$on('narvar.hideModal', _hideModal);

        element.bind('click', function (e) {
          if (e.target.className.match('modal-wrapper')) {
            _hideModal();
          }
        });

      } // End link()
    };

  }]);

(function(angular) {
  'use strict';

  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.eddWidget
   * @description
   * # eddWidget
   * Displays estimated delivery date information.
   */
  angular.module('narvar').directive('eddWidget', ['R', 'TrackingSvc',
    function(R, TrackingSvc) {
      return {
        restrict : 'E',
        scope    : {
          whereIsMyPackageClickText : '@',
          whereIsMyPackageMessage   : '@',
          contactInfoClickText      : '@'
        },
        templateUrl : 'widgets/edd/templates/edd-widget.html',
        link        : function(scope, element, attrs) {

          TrackingSvc.resources.tracking.get(function(response) {
            var estimatedDelivery = R.path(['tracking', 'estimated_delivery'], response),
                deviceType        = R.prop('device_type', response);

            scope.estimatedDeliveryRangeStartDay   = R.path(['range_start', 'day'], estimatedDelivery);
            scope.estimatedDeliveryRangeStartMonth = R.path(['range_start', 'month'], estimatedDelivery);
            scope.estimatedDeliveryRangeStartDate  = R.path(['range_start', 'date'], estimatedDelivery);
            scope.estimatedDeliveryRangeStartYear  = R.path(['range_start', 'year'], estimatedDelivery);

            scope.estimatedDeliveryRangeEndDay   = R.path(['range_end', 'day'], estimatedDelivery);
            scope.estimatedDeliveryRangeEndMonth = R.path(['range_end', 'month'], estimatedDelivery);
            scope.estimatedDeliveryRangeEndDate  = R.path(['range_end', 'date'], estimatedDelivery);
            scope.estimatedDeliveryRangeEndYear  = R.path(['range_end', 'year'], estimatedDelivery);

            scope.estimatedDeliveryRangeStartMonthName = months[scope.estimatedDeliveryRangeStartMonth];
            scope.estimatedDeliveryRangeEndMonthName   = months[scope.estimatedDeliveryRangeEndMonth];

            scope.deliveryStatusMessage = R.path(['tracking', 'delivery', 'status_message'], response);

            scope.isSingleDate = R.equals(scope.estimatedDeliveryRangeStartDate, scope.estimatedDeliveryRangeEndDate);
            scope.isDelivered  = R.equals('DELIVERED', scope.deliveryStatusMessage);
            scope.isMobile     = R.equals('MOBILE',    deviceType);
            scope.isTablet     = R.equals('TABLET',    deviceType);

            scope.dataAdvIdPackage = scope.isMobile ? 'package_info_mobile' : 'package_info';
            scope.dataAdvIdContact = scope.isMobile ? 'contact_info_mobile' : 'contact_info';

            scope.handleBannerAdLinkClick = function() {

              // TODO Replace this shim with business logic.
              console.log(scope.dataAdvIdPackage);
            };

            (function calculateDaysRemaining() {
              var context = scope.isSingleDate ? 'Start' : 'End';

              scope.daysRemaining = Math.ceil(
                (new Date(
                  R.prop('estimatedDeliveryRange' + context + 'Year', scope),
                  R.prop('estimatedDeliveryRange' + context + 'Month', scope),
                  R.prop('estimatedDeliveryRange' + context + 'Date', scope)
                ).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24
              );

              scope.daysRemainingText = R.cond([
                [R.equals(0), 'Today'],
                [R.equals(1), '1 more day'],
                [R.T,         scope.daysRemaining + ' more days']
              ], scope.daysRemaining);
            }());

          }); // End TrackingSvc.get()

        } // End link()

      }; // End return;

    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.calendarWidget
   * @description
   * # calendarWidget
   * Displays estimated delivery date information.
   */
  angular.module('narvar').directive('calendarWidget', ['R', 'moment', 'TrackingSvc',
    function(R, moment, TrackingSvc) {
      return {
        restrict : 'E',
        scope    : {


        },
        templateUrl : 'widgets/calendar/templates/calendar-widget.html',
        link        : function(scope, element, attrs) {

          var scopeProp = R.prop(R.__, scope);

          scope.weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

          TrackingSvc.resources.tracking.get(function(response) {
            var _estimatedDelivery = R.path(['tracking', 'estimated_delivery'], response),
                _carrierStartDay   = parseInt(R.path(['tracking', 'carrier', 'start_day'], response), 10),
                _carrierEndDay     = parseInt(R.path(['tracking', 'carrier', 'end_day'],   response), 10),
                _carrierDaysInARow = R.inc(_carrierEndDay - _carrierStartDay);

            scope.estimatedDeliveryRangeStartDay   = R.path(['range_start', 'day'], _estimatedDelivery);
            scope.estimatedDeliveryRangeStartMonth = R.path(['range_start', 'month'], _estimatedDelivery);
            scope.estimatedDeliveryRangeStartDate  = R.path(['range_start', 'date'], _estimatedDelivery);
            scope.estimatedDeliveryRangeStartYear  = R.path(['range_start', 'year'], _estimatedDelivery);

            scope.estimatedDeliveryRangeEndDay   = R.path(['range_end', 'day'], _estimatedDelivery);
            scope.estimatedDeliveryRangeEndMonth = R.path(['range_end', 'month'], _estimatedDelivery);
            scope.estimatedDeliveryRangeEndDate  = R.path(['range_end', 'date'], _estimatedDelivery);
            scope.estimatedDeliveryRangeEndYear  = R.path(['range_end', 'year'], _estimatedDelivery);

            scope.estimatedDeliveryRangeStartCalendarMonth = R.inc(scopeProp('estimatedDeliveryRangeStartMonth'));
            scope.estimatedDeliveryRangeEndCalendarMonth   = R.inc(scopeProp('estimatedDeliveryRangeEndMonth'));

            scope.carrierHolidays = R.mergeAll(
              R.map(R.createMapEntry(R.__, true), R.split(',', R.path(['tracking', 'carrier', 'holidays'], response)))
            );

            scope.carrierDeliveryDays = R.compose(
              R.insertAll(_carrierStartDay, R.repeat(true, _carrierDaysInARow)),
              R.remove(_carrierStartDay, _carrierDaysInARow))(R.repeat(false, 7)
            );

            scope.numberOfDaysInMonth = new Date(
              scopeProp('estimatedDeliveryRangeStartYear'),
              scopeProp('estimatedDeliveryRangeStartCalendarMonth'),
              0
            ).getDate();

            scope.numberOfWeeksInMonth = Math.ceil(R.divide(scopeProp('numberOfDaysInMonth'), 7));

            scope.rangeLastDate = (scopeProp('estimatedDeliveryRangeEndDate') >= scopeProp('estimatedDeliveryRangeStartDate'))
              ? scopeProp('estimatedDeliveryRangeStartDate')
              : scopeProp('numberOfDaysInMonth');

            scope.monthLeadingDays = new Date(
              scopeProp('estimatedDeliveryRangeStartYear'),
              scopeProp('estimatedDeliveryRangeStartMonth'),
              1
            ).getDay();

            scope.calendarGrid = R.splitEvery(7, R.flatten(
              R.prepend(new Array(scope.monthLeadingDays), R.range(1, R.inc(scope.numberOfDaysInMonth)))
            ));

            /**
             * Calculate if provided date is a carrier working day.
             * @param {Number} date
             * @returns {Boolean}
             */
            scope.isHighlighted = function(date) {

              var _moment;

              if (!R.isNil(date)) {
                _moment = moment()
                  .year(scope.estimatedDeliveryRangeStartYear)
                  .month(scope.estimatedDeliveryRangeStartMonth)
                  .date(date);

                return scopeProp('carrierDeliveryDays')[_moment.day()] && !R.path(['carrierHolidays', _moment.format('YYYYMMDD')], scope);
              } else {
                return false;
              }

            };

          }); // End TrackingSvc.get()

        } // End link()

      }; // End return;

    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.faqWidget
   * @description
   * # faqWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('faqWidget', ['R',
    function(R) {
      return {
        restrict : 'E',
        scope    : {
          type : '@'
        },
        templateUrl : 'widgets/faq/templates/faq-widget.html',
        link        : function(scope, element, attrs) {
          scope.tabs = [
            {
              title : "Frequently asked question 1?",
              body  : "Answer to frequently asked question 1. Bacon ipsum dolor amet boudin t-bone hamburger leberkas ham hock, turkey pig doner alcatra corned beef. Capicola tri-tip porchetta jerky ball tip shankle pancetta pork loin swine. Prosciutto beef ribs pig sirloin. Sirloin capicola andouille kielbasa tail. Picanha swine pastrami turkey turducken. Sirloin chicken filet mignon tongue jowl. Filet mignon beef ribs ham hock swine tenderloin bacon picanha venison flank drumstick pancetta salami cupim. Tongue andouille ham hock picanha kielbasa brisket pork chop bacon short ribs alcatra porchetta spare ribs ground round shankle. Capicola alcatra kielbasa spare ribs drumstick ribeye. Tri-tip hamburger cupim, jowl kielbasa flank andouille beef turducken pork loin. Tenderloin strip steak chicken, alcatra chuck tail jerky bresaola boudin pancetta. Kielbasa andouille t-bone, jowl turducken ball tip tongue ham kevin hamburger pig pork belly cow shankle. Porchetta turkey turducken, tail ribeye cow chuck jerky shoulder tri-tip."
            },
            {
              title : "Frequently asked question 2?",
              body  : "Answer to frequently asked question 2. Bacon ipsum dolor amet boudin t-bone hamburger leberkas ham hock, turkey pig doner alcatra corned beef. Capicola tri-tip porchetta jerky ball tip shankle pancetta pork loin swine. Prosciutto beef ribs pig sirloin. Sirloin capicola andouille kielbasa tail. Picanha swine pastrami turkey turducken. Sirloin chicken filet mignon tongue jowl. Filet mignon beef ribs ham hock swine tenderloin bacon picanha venison flank drumstick pancetta salami cupim. Tongue andouille ham hock picanha kielbasa brisket pork chop bacon short ribs alcatra porchetta spare ribs ground round shankle. Capicola alcatra kielbasa spare ribs drumstick ribeye. Tri-tip hamburger cupim, jowl kielbasa flank andouille beef turducken pork loin. Tenderloin strip steak chicken, alcatra chuck tail jerky bresaola boudin pancetta. Kielbasa andouille t-bone, jowl turducken ball tip tongue ham kevin hamburger pig pork belly cow shankle. Porchetta turkey turducken, tail ribeye cow chuck jerky shoulder tri-tip."
            },
            {
              title : "Frequently asked question 3?",
              body  : "Answer to frequently asked question 3. Bacon ipsum dolor amet boudin t-bone hamburger leberkas ham hock, turkey pig doner alcatra corned beef. Capicola tri-tip porchetta jerky ball tip shankle pancetta pork loin swine. Prosciutto beef ribs pig sirloin. Sirloin capicola andouille kielbasa tail. Picanha swine pastrami turkey turducken. Sirloin chicken filet mignon tongue jowl. Filet mignon beef ribs ham hock swine tenderloin bacon picanha venison flank drumstick pancetta salami cupim. Tongue andouille ham hock picanha kielbasa brisket pork chop bacon short ribs alcatra porchetta spare ribs ground round shankle. Capicola alcatra kielbasa spare ribs drumstick ribeye. Tri-tip hamburger cupim, jowl kielbasa flank andouille beef turducken pork loin. Tenderloin strip steak chicken, alcatra chuck tail jerky bresaola boudin pancetta. Kielbasa andouille t-bone, jowl turducken ball tip tongue ham kevin hamburger pig pork belly cow shankle. Porchetta turkey turducken, tail ribeye cow chuck jerky shoulder tri-tip."
            }
          ];
        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.footerWidget
   * @description
   * # footerWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('footerWidget', ['R',
    function(R) {
      return {
        restrict    : 'E',
        scope       : {},
        templateUrl : 'widgets/footer/templates/footer-widget.html',
        link        : function(scope, element, attrs) {

        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.headerWidget
   * @description
   * # headerWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('headerWidget', ['R',
    function(R) {
      return {
        restrict : 'E',
        scope    : {
          img   : '@',
          text  : '@',
          link  : '@',
          align : '@',
          fixed : '@'
        },
        templateUrl : 'widgets/header/templates/header-widget.html',
        link        : function(scope, element, attrs) {

        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.smsWidget
   * @description
   * # smsWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('smsWidget', ['R', '$location',
    function(R, $location) {
      return {
        restrict    : 'E',
        scope       : {
          retailerName      : '@',
          carrierName       : '@',
          errorMessage      : '@',
          successMessage    : '@',
          messageDelay      : '@',
          locale            : '@',
          showSuccessButton : '&',
          successCallback   : '&',
          enableCheckbox    : '&',
          template          : '@',
          optInPolicyUrl    : '@',
          optInPolicyLabel  : '@'
        },
        templateUrl : 'widgets/sms/templates/sms-widget.html',
        link        : function(scope, element, attrs) {

          var queryStringParam = R.prop(R.__, $location.search()),
              scopeProp        = R.prop(R.__, scope);

          scope.messageDelay      = parseInt(R.defaultTo(1000, scopeProp('messageDelay')), 10);
          scope.locale            = R.defaultTo('us',     scopeProp('locale') || queryStringParam('locale'));
          scope.showSuccessButton = R.defaultTo(false,    scopeProp('showSuccessButton'));
          scope.successCallback   = R.defaultTo(false,    scopeProp('successCallback'));
          scope.enableCheckbox    = R.defaultTo(false,    scopeProp('enableCheckbox'));
          scope.template          = R.defaultTo('widget', scopeProp('template'));
          scope.retailerName      = R.defaultTo('Retailer', scopeProp('retailerName'));
          scope.carrierName       = R.defaultTo('Carrier',  scopeProp('carrierName'));

          scope.optInPolicyUrl    = R.defaultTo('https://narvar.com', scopeProp('optInPolicyUrl'));
          scope.optInPolicyLabel  = R.defaultTo('Opt-in policy',      scopeProp('optInPolicyLabel'));

          scope.thirdParty = true;
          scope.smsProcess = false;

          scope.trackingNumbers = queryStringParam('tracking_numbers');
          scope.retailerBrand   = queryStringParam('brand');
          scope.orderNumber     = queryStringParam('order_number');
          scope.smsPackage      = {};

          scope.handleInputFocus = function() {
            // TODO ng-animate this
            scope.showCheckbox = scopeProp('enableCheckbox');
          };

          scope.handleCheckboxToggle = function() {
            scope.thirdParty = !scopeProp('thirdParty');
          };

          // TODO Swap jQuery plugin with angular filter
          angular.element('#sms-input').intlTelInput({
            preferredCountries :  [scope.locale]
          });

          // TODO finish porting in sms logic here....
        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.feedbackComment
   * @description
   * # feedbackComment
   * General feedback comment
   */
  angular.module('narvar').directive('feedbackComment', ['R',
    function(R) {
      return {
        restrict : 'E',
        require  : '^surveyWidget',
        scope    : {
          caption         : '@',
          placeholderText : '@'
        },
        templateUrl : 'widgets/survey/templates/feedback-comment.html',
        link        : function(scope, element, attrs, surveyWidgetCtrl) {

          /**
           * Record the value from the customer.
           * @param {Number} value
           */
          scope.record = function(value) {
            surveyWidgetCtrl.record('Comment', value);
          };

          scope.buttonHoverState = false;
          scope.buttonClass      = scope.buttonHoverState ? 'btn-primary' : 'btn-primary-outline';
        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.feedbackComplete
   * @description
   * # feedbackComplete
   * General feedback complete
   */
  angular.module('narvar').directive('feedbackComplete', ['R',
    function(R) {
      return {
        restrict : 'E',
        require  : '^surveyWidget',
        scope    : {
          caption    : '@',
          subtext    : '@',
          buttonText : '@',
          buttonHref : '@'
        },
        templateUrl : 'widgets/survey/templates/feedback-complete.html',
        link        : function(scope, element, attrs, surveyWidgetCtrl) {
          scope.buttonHoverState = false;
          scope.buttonClass      = scope.buttonHoverState ? 'btn-primary' : 'btn-primary-outline';
        }
      }
    }]);
}(angular));

(function(angular) {

  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.feedbackStars
   * @description
   * # feedbackStars
   * Overall rating for the delivery.
   */
  angular.module('narvar').directive('feedbackStars', ['R',
    function(R) {

      var title = 'How was your delivery?';

      return {
        restrict : 'E',
        require  : '^surveyWidget',
        scope    : {
          caption    : '@',
          adjectives : '='
        },
        templateUrl : 'widgets/survey/templates/feedback-stars.html',
        link        : function(scope, element, attrs, surveyWidgetCtrl) {

          /**
           * Set the caption to one of the hovered stars adjective strings.
           * @param {Number} index
           */
          scope.setCaptionFromAdjectivesIndex = function(index) {
            scope.caption = scope.adjectives[index];
          };

          /**
           * Reset the caption to the default title.
           */
          scope.resetCaption = function() {
            scope.caption = title;
          };

          /**
           * Record the value from the customer.
           * @param {Number} value
           */
          scope.record = function(value) {
            surveyWidgetCtrl.record('Stars rating', value);
          };

          scope.hoverIndex = -1;
          scope.title      = scope.caption;
        }
      }
    }]);
}(angular));

(function(angular) {

  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.feedbackTiming
   * @description
   * # feedbackTiming
   * Feedback for delivery promptness.
   */
  angular.module('narvar').directive('feedbackTiming', ['R',
    function(R) {
      return {
        restrict : 'E',
        require  : '^surveyWidget',
        scope    : {
          caption    : '@',
          adjectives : '='
        },
        templateUrl : 'widgets/survey/templates/feedback-timing.html',
        link        : function(scope, element, attrs, surveyWidgetCtrl) {

          /**
           * Set the hover state of the button.
           * @param {Boolean} state
           */
          scope.setButtonHoverState = function(state) {
            scope.buttonHoverState = state;
          };

          /**
           * Record the value from the customer.
           * @param {Number} value
           */
          scope.record = function(value) {
            surveyWidgetCtrl.record('Timing rating', value);
          };

          scope.buttonHoverState = false;
          scope.buttonClass      = scope.buttonHoverState ? 'btn-primary' : 'btn-primary-outline';

        }
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.surveyWidget
   * @description
   * # surveyWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('surveyWidget', ['R',
    function(R) {
      return {
        restrict    : 'E',
        scope       : {
          steps : '@'
        },
        controller  : function() {
          this.currentStep = 1;

          this.nextStep = function() {
            this.currentStep += 1;
            return this;
          };

          this.record = function(type, value) {
            // TODO remove console log statement and POST
            console.log(type + ': ' + value);
            return this.nextStep();
          };
        },
        controllerAs : 'surveyWidgetCtrl',
        templateUrl  : 'widgets/survey/templates/survey-widget.html',
        link         : function(scope, element, attrs) {}
      }
    }]);
}(angular));

(function(angular) {
  'use strict';

  /**
   * @ngdoc function
   * @author seancannon
   * @name narvar.directive.trackingStatusWidget
   * @description
   * # trackingStatusWidget
   * Displays tracking information
   */
  angular.module('narvar').directive('trackingStatusWidget', ['R', 'TrackingSvc',
    function(R, TrackingSvc) {

      console.log('R = ', window.R);
      return {
        restrict    : 'E',
        scope       : {},
        templateUrl : 'widgets/trackingStatus/templates/tracking-status-widget.html',
        link        : function(scope, element, attrs) {
          scope.status = 'Fetching status...';
          scope.img    = '/assets/images/processing.svg';

          TrackingSvc.resources.tracking.get(function(response) {
            var status = R.path(['tracking', 'status'], response);
            scope.status = status;
            scope.img    = '/assets/images/' + R.toLower(status) + '.svg';
          });
        }
      }
    }]);
}(angular));
